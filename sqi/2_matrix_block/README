Постановка задачи:
Реализовать последовательный алгоритм блочного матричного умножения и оценить влияние кэша на время выполнения программы.

Для компиляции программы используйте "make"
Для запуска ./matrix_block <A-file> <B-file> <C-file> <block_size> <type>,
где <type> 0 - ijk, 1 - ikj,
<block_size> либо явно указать размер блока, либо -1 - оптимальный размер блока.

Матрицы сгенерированны программой "gen.cpp".
Формат файла матрицы: размер матрицы (row" "col), "\n", далее сама матрица, записанная построчно (тестовые матрицы находятся в папке test_matrix).

Команда "make report" перемножает матрицы 500х500 и строит графики зависимостей (время, промахи кэшей L1 и L2, процессорные такты, промахи TLB) от размера блока и типа перемножения (все графики находятся в папке "plots").
Команда "make test" проверяет правильность перемножения матриц пользуясь результатом перемножения пакета "octave".

В основной программе реализованны алгоритмы умножения матриц, их обработка (считывание, вывод) и снятие параметров.
В программе верификации реализованно умножения матриц пакетом "octave" и их сравнение.
Все параметры сняты библиотекой PAPI (на моём компьютере не поддерживается считывание FLOPS, поэтому графиков только 5, все доступные и недоступные флаги можно посмотреть в файле "papi_avail").

Программы и отчёт написал
Козлов М.В.
323гр.
